///////////////////////////////////////////////////////////////////////////////
/// \file         Node.cpp
/// \author       Edgar Villasenor
/// \date         17 November 2017
/// \brief        Methods associated with Node
///				
///           
///       
///				
///////////////////////////////////////////////////////////////////////////////

#include "Node.h"

///////////////////////////////////////////////////////////////////////
/// Node ()
/// \pre    None
/// \post   Node has been created
/// \param  newData
/// \return	Node
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
Node::Node(const string & newData)
{
	this->mData = newData;
	this->mpLeft = nullptr;
	this->mpRight = nullptr;
}

///////////////////////////////////////////////////////////////////////
/// ~Node ()
/// \pre    Node is done being used
/// \post   Node has been deleted
/// \param  None
/// \return	None
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
Node::~Node()
{
	//Nodes are deleted by BST's destroyTree so nothing needed here
}

///////////////////////////////////////////////////////////////////////
/// setData ()
/// \pre    Node instantiated
/// \post   mData has been set
/// \param  newData
/// \return	Void
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
void Node::setData(const string & newData)
{
	this->mData = newData;
}

///////////////////////////////////////////////////////////////////////
/// setLeft ()
/// \pre    Node instantiated
/// \post   mpLeft has been set
/// \param  pNewLeft
/// \return	Void
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
void Node::setLeft(Node * const pNewLeft)
{
	this->mpLeft = pNewLeft;
}

///////////////////////////////////////////////////////////////////////
/// setRight ()
/// \pre    Node instantiated
/// \post   mpRight has been set
/// \param  pNewRight
/// \return	Void
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
void Node::setRight(Node * const pNewRight)
{
	this->mpRight = pNewRight;
}

///////////////////////////////////////////////////////////////////////
/// getData ()
/// \pre    mData has been set
/// \post   mData has been returned
/// \param  None
/// \return	mData
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
string Node::getData() const
{
	return this->mData;
}

///////////////////////////////////////////////////////////////////////
/// getLeft ()
/// \pre    mpLeft has been set
/// \post   mpLeft has been returned
/// \param  None
/// \return	mpLeft
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
Node *& Node::getLeft() 
{
	return this->mpLeft;
}

///////////////////////////////////////////////////////////////////////
/// getRight ()
/// \pre    mpRight has been set
/// \post   mpRight has been returned
/// \param  None
/// \return	mpRight
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
Node *& Node::getRight() 
{
	return this->mpRight;
}

///////////////////////////////////////////////////////////////////////
/// printData ()
/// \pre    Being called by a derived class
/// \post   Data has been printed
/// \param  None
/// \return	Void
/// \throw	No exception handling
///////////////////////////////////////////////////////////////////////
void Node::printData()
{
	cout << this->getData() << endl;
}
